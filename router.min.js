'use strict';function addRoutes(routes){for(let i=0;i<routes.length;i+=1){addRoute(...Object.values(routes[i]))}}function addRoute(route,partial,title,js=[],css=[],preload=[]){let regex;let variables;if(!route.startsWith('/')){route=`/${ route }`}regex=generateRouteRegex(route);variables=generateVariables(route);window.myapp.routes.push({route,regex,partial,title,js,css,preload,variables})}function generateRouteRegex(route){let leadingSlash=route[route.length-1]==='/'?'':'/?';return new RegExp(`^${route.replace(/\*/g,'.+').replace(/\/([0-9a-zA-Z]+)/g,'/($1)').replace(/:.+?(\?)?(\/|$)/g,'([^/]+$2)$1')}${ leadingSlash }$`)}function getRoute(url){for(let i=0;i<window.myapp.routes.length;i+=1){const route=window.myapp.routes[i];let matches=route.regex.exec(url);if(!matches){continue}if(route.variables&&route.variables.length){let params=fetchParams(route,matches);if(params){window.myapp.params=params}}return route}}function generateVariables(route){let variables=[];let routeParams=route.split('/');routeParams.shift();for(let i=0;i<routeParams.length;i+=1){if(routeParams[i][0]===':'){let name=routeParams[i].replace(/:(.+?)(\?|$)/,'$1');variables.push({index:i+1,name,optional:routeParams[i][routeParams[i].length-1]==='?'})}}return variables}function fetchParams(route,matches){if(!route.variables){throw Error('No variables, function should not have been called.')}let params=[];for(let i=0;i<route.variables.length;i+=1){if(matches[route.variables[i].index]){try{params[route.variables[i].name]=decodeURIComponent(matches[route.variables[i].index].replace(/\//g,''))}catch(e){throw Error('Unexpected error while decoding the URI component.')}}}return params}function setLoading(value,deactivate=false){const oldValue=window.myapp.loading;window.myapp.loading=value;const event=new CustomEvent('myapp-load-change',{detail:{newValue:value,oldValue,deactivate}});window.dispatchEvent(event)}